# Task ID: 6
# Title: Implement User Account System and Subscription Management
# Status: done
# Dependencies: 1
# Priority: high
# Description: Create the user authentication system using Supabase, implement user roles (Free/Paid), and integrate Stripe for subscription billing.
# Details:
1. Set up Supabase project and configure authentication
2. Implement email/password authentication flow
3. Create user profile management
4. Set up Stripe integration for subscription billing
5. Implement tier-based feature access control
6. Create settings interface for account management
7. Implement usage tracking for free tier limitations
8. Add secure storage for user preferences

Code example for Authentication and Subscription Service:
```swift
import Supabase
import Stripe

class AuthService: ObservableObject {
    @Published var currentUser: User?
    @Published var isAuthenticated = false
    @Published var userTier: UserTier = .free
    
    private let supabase = SupabaseClient(
        supabaseURL: URL(string: "YOUR_SUPABASE_URL")!,
        supabaseKey: "YOUR_SUPABASE_KEY"
    )
    
    private let stripePublishableKey = "YOUR_STRIPE_PUBLISHABLE_KEY"
    
    init() {
        // Check for existing session
        Task {
            do {
                let session = try await supabase.auth.session
                await MainActor.run {
                    self.currentUser = session.user
                    self.isAuthenticated = true
                    self.fetchUserTier()
                }
            } catch {
                print("No active session: \(error)")
            }
        }
    }
    
    func signUp(email: String, password: String) async throws {
        let response = try await supabase.auth.signUp(
            email: email,
            password: password
        )
        
        await MainActor.run {
            self.currentUser = response.user
            self.isAuthenticated = true
            self.userTier = .free
        }
        
        // Create user profile in database
        try await createUserProfile(userId: response.user.id)
    }
    
    func signIn(email: String, password: String) async throws {
        let response = try await supabase.auth.signIn(
            email: email,
            password: password
        )
        
        await MainActor.run {
            self.currentUser = response.user
            self.isAuthenticated = true
            self.fetchUserTier()
        }
    }
    
    func signOut() async throws {
        try await supabase.auth.signOut()
        
        await MainActor.run {
            self.currentUser = nil
            self.isAuthenticated = false
            self.userTier = .free
        }
    }
    
    private func createUserProfile(userId: String) async throws {
        let profile = UserProfile(
            id: userId,
            email: currentUser?.email ?? "",
            tier: "free",
            createdAt: Date()
        )
        
        try await supabase
            .from("profiles")
            .insert(profile)
            .execute()
    }
    
    private func fetchUserTier() {
        guard let userId = currentUser?.id else { return }
        
        Task {
            do {
                let response = try await supabase
                    .from("profiles")
                    .select()
                    .eq("id", value: userId)
                    .single()
                    .execute()
                
                if let profile = try response.decoded(as: UserProfile.self) {
                    await MainActor.run {
                        self.userTier = profile.tier == "paid" ? .paid : .free
                    }
                }
            } catch {
                print("Error fetching user tier: \(error)")
            }
        }
    }
    
    func upgradeToProTier() async throws {
        // Initialize Stripe payment sheet
        let backendURL = URL(string: "YOUR_BACKEND_URL/create-payment-intent")!
        var request = URLRequest(url: backendURL)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        
        let (data, _) = try await URLSession.shared.data(for: request)
        let paymentIntentResponse = try JSONDecoder().decode(PaymentIntentResponse.self, from: data)
        
        // Configure Stripe payment sheet
        STPAPIClient.shared.publishableKey = stripePublishableKey
        let paymentSheet = PaymentSheet(paymentIntentClientSecret: paymentIntentResponse.clientSecret)
        
        // Present payment sheet (this would be called from UI)
        // After successful payment, update user tier in database
        if let userId = currentUser?.id {
            try await supabase
                .from("profiles")
                .update(["tier": "paid"])
                .eq("id", value: userId)
                .execute()
            
            await MainActor.run {
                self.userTier = .paid
            }
        }
    }
}

enum UserTier {
    case free
    case paid
}

struct UserProfile: Codable {
    let id: String
    let email: String
    let tier: String
    let createdAt: Date
}

struct PaymentIntentResponse: Decodable {
    let clientSecret: String
}
```

# Test Strategy:
1. Test user registration flow
2. Verify login and session management
3. Test Stripe integration with test cards
4. Verify tier-based feature access control
5. Test user profile management
6. Verify secure storage of user preferences
7. Test usage tracking for free tier limitations
8. Verify error handling for authentication failures
9. Test subscription upgrade and downgrade flows
